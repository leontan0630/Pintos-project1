			+--------------------+
			|        CSE 421     |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.


Leon Tan <jialuota@buffalo.edu>
XiaoFei Liu <xiaofeil@buffalo.edu>
JiaQi Lin <jiaqilin@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
Round Robin Scheduling https://en.wikipedia.org/wiki/Round-robin_scheduling

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
1)Creating a static struct_list variable call sleepThread_list in timer.c
Using it to store the thread that is sleeping.
2)Creating a dynamic variable int64_t total inside timer_sleep class
Using it to rank the wake up time of each thread
3)Creating a static struct_list variable call sleepTime_list in timer.c
	Parallel to the sleepThread_list

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
In timer_sleep():
Check if the argument tick if it is equal to 0 then return
Use the ticks from timer_ticks() to add the argument tick then store it into total
Adding total to sleepTime_list
Adding the current thread into the static variable sleepThread_list.
Rank the sleepThread_list base on the sleepTime_list using a for loop to compare each element. Also rank the sleepTime_list so that they are parallel to each other
In timer_interrupted():
Getting the ticks1 from the sleepTime_list then compare to the global ticks2 if ticks1 less than ticks2 break else remove the current thread from sleepThread_list. 
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	Since the sleepThread_list is already rank which had minimize the amount of time spend in the time interrupt handler.
---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	Because I rank thread by sleepThread_list so it will avoid race conditions since multiple threads will not share the same ticks.
>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
	Since I already check if the ticks in the argument is less than or equal to 0 or not then it won’t call to timer_interrupt.
---- RATIONALE ----
>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
	I think this design will spend less time since the thread is ranked and also there is a sleepTime_list to keep track it as well therefore it is very stable and fast.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
Int Original_priority
-Keep track of the original priority of the thread.
Struct list lock_quere
-The list of threads that are waiting to acquire the lock
Struct list donor_list
-The list of threads that have the lock and are potential donor of lock.
Struct list donation_list
-The list of priority donated, keep track of this to use in an nested donation.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)








Original
Thread		priority		lock held	lock acquire	donor_list		A
A			L				1				2							B
B			M				2				1							C____
C			H				null			2		
Step1, C acquire lock from B
Thread		priority		lock held	lock acquire	donor_list		A
A			L		 		1			2				C				B    _____
B			H				null		1								C__|lock2
C			M		 		2			2


Step 2, B acquire lock from A
Thread		priority		lock held	lock acquire	donor_list		A		_____
A			H		 		null		2				B,C				B    ___|lock1
B			M				1			1								C__| l2
C			L				2			2						


Step 3, A acquire lock from C
Thread		priority		lock held	lock acquire	donor_list		A        ___l2
A			L		 		2			2				A,B,C			B    __|l1  |
B			M				1			1								C__| l2	    |___
C			H				null		2						
---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
The queue lock list will be sorted from highest priority to lowest, when a lock is asked for, it will guarantee to take out the highest priority first, when the lock exchange is complete, the thread will have a different priority and will be sorted again in the queue list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
-Assume that the current thread is waiting for the lock.
-The higher priority is given to the current thread
-The current thread came to find the lock
-if no lock, return
-if there is lock, compare lock holder’s priority and the current thread’s priority. 
-if current thread have lower priority return
-if current thread have higher priority, current thread takes lock from lock holder.
		-set lock holder’s priority to current thread’s priority.
-set current thread to be a lock holder.
-set the lock to the queue, resort it, and update the potential donor.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
-When the lock holder have a event of lock_release, it’s current lock will become NULL.
-the thread that took the lock will be removed from the queue, the lock holder will be added to the   queue.
-priority will be updated for both donor and donee.
-the queue will be resorted.
-next highest priority will be in the first of the queue, and will be ready to acquire lock.
---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
Some threads are required to read or write with the data, with the thread_set_priority, if a thread is writing on a data, and a new thread is suddenly acquiring the priority and require to write or read on the same data, this will result in a data race. The implementation will lock higher priority thread from having data conflict will lower priority thread, which is why higher priority is the first in the queue to be waiting for a lock.
---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
The design is to aim to have simple algorithm in which the most important is the thread’s priority, and the lock holder’s priority, if we sorted thread that are waiting for a lock in terms of it priority, we will not need to have another list to keep track the priority, saving storage in the heap, thus we only need an integer that will get the index of the thread in the queue.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

The following two variables will be added inside of struct thread in thread.h:
int recent_cpu;      --- recent cpu value for thread
int nice_value;	      --- nice value for thread


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   0   0   99  98  97   A
 4     4   0   0   98  98  97   B
 8     4   4   0   98  97  97   A
12     8   4   0   97  97  97   C
16     8   4   4   97  97  96   B
20     8   8   4   97  96  96   A
24    12   8   4   96  96  96   C 
28    12   8   8   96  96  95   B
32    12  12   8   96  95  95   A
36    16  12   8   95  95  95   C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

Yes, When there are two threads with same priority number and one with lower priority, the one of the two with same priority that waits longer will run first. While all the three threads have the same priority, the one that wait longest will run first 

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?
According to the above algorithm, the behavior to reset the nice value will be done outside of interrupt context. The variables such as recent_cpu and priority need to be computed and updated inside of interrupt context, and these values for current running thread only need to be updated every 4 ticks. However, while there are a large number of thread that need to be handled, this algorithm need to compute for every thread and it probably will perform badly. 

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

Disadvantages:
Performance is not efficient for a lot of thread

Advantage:
Easy to understand and follow how the algorithm works. 

The main purpose to refine my design would be to improve its efficiency. In order to do so, I might need to avoid to turn off interrupts and to use locks of variables instead.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

I will add a new fixed-point.h and implement the fixed-point math in it.
Since Pintos does not support floating-point arithmetic in the kernel, we use fixed-point math.
I would have created an abstraction layer for fixed-point math, because it is easy to understand.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?


